[{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://www.roger-beecham.com/gridmappr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using gridmap layouts","text":"article demonstrates gridmappr-generated layouts can used standard ggplot2 create different gridmap designs. Gridmaps encoded: way thematic maps, using geom_sf(); information-rich ‘glyphmaps’, using ggplot2’s layered geoms facet_grid(row~col); gridmap-arranged thematic maps, OD Maps, using facet_grid(row~col) together geom_sf().","code":""},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"setup-and-data","dir":"Articles","previous_headings":"","what":"Setup and data","title":"Using gridmap layouts","text":"following libraries required run article: dataset needed simple features file 96 départements France (france_deps) ships gridmappr. graphics demonstrated rely derived dataset file. code , create full ‘origin-destination’ (OD) dataset département pair (96^2 OD pairs), calculating straight-line distance bewteen département centroids.","code":"# Tidyverse library(here) library(ggplot2) library(dplyr) library(readr) library(forcats) library(tidyr) library(stringr) # Spatial library(sf) library(geosphere) # Gridmaps library(gridmappr) # Alternatives library(geofacet)  theme_set(theme_void()) # Département names and centroids that serve as \"destinations\". dests <- france_deps |>    st_drop_geometry() |> select(-name_prefecture) |>      mutate(dests=\"dests\") |>     select(dests, d_name=name, d_x=x, d_y=y) |>     nest(.by=dests) # Calculate pairwise distancess between OD département pairs. france_ods <- france_deps |>     st_drop_geometry() |> select(-name_prefecture) |>      mutate(origins=\"origins\") |>     select(origins, o_name=name, o_x=x, o_y=y) |>    mutate(dests=dests$data) |>     unnest(dests) |>     rowwise() |>    # Calculate distance and express in kms.    mutate(dep_dist=distHaversine(c(o_y, o_x), c(d_y, d_x))/1000) |>    ungroup() rm(dests)"},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"generate-allocation-and-build-polygon-object-with-make_grid","dir":"Articles","previous_headings":"","what":"Generate allocation and build polygon object with make_grid()","title":"Using gridmap layouts","text":"main function gridmappr, points_to_grid(), described top-level package description. parameterisation function used achieve reasonable allocation French départements, selected grid dimensions spacers.  Now layout generated, create corresponding polygon object order layout plotted. can achieved make_grid(). function takes sf data frame ‘real’ geography returns sf data frame representing grid, variables identifying column row IDs (bottom left origin) geographic centroids grid squares. gridded object can joined gridmap solution returned points_to_grid() order create object grid cell corresponds gridmap allocation position. make_grid() takes following arguments: sf_file sf object grid passed . n_row Number rows grid. n_col Number columns grid. Cells grid département allocated isolated joining gridded object (grid) layout solution. grid file plotted using ggplot2’s geom_sf geom.","code":"# Grid dimensions. n_row <- 13 n_col <- 12 # Spacers to separate Corsica from mainland. spacers <- list(   c(1, 11), c(2, 11), c(3, 11), c(2,10), c(1,10) ) # Point centroids for real départements. pts <- france_deps |>   st_drop_geometry() |>   select(area_name = name, x = x, y = y) # Derive layout solution. solution <- points_to_grid(pts, n_row, n_col, .6, spacers) # Pass a grid over real départements. grid <- make_grid(france_deps, n_row, n_col) # Plot layout solution. grid |>    left_join(solution) |>    ggplot() +   # Draw original geog.   geom_sf(data = france_deps, fill=\"#d9d9d9\", colour=\"#FFFFFF\", linewidth = .3, alpha=.9) +   # Draw grid cell candidates.   geom_sf(fill = \"transparent\", colour = \"#969696\", linewidth = .2) +   # Draw grid cells allocated.   geom_sf(data = . %>% filter(!is.na(area_name)), colour=\"#451C14\", fill=\"#F1DDD1\", linewidth = .3, alpha=.8)"},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"gridmap-as-thematic-map-with-geom_sf","dir":"Articles","previous_headings":"","what":"Gridmap as thematic map with geom_sf()","title":"Using gridmap layouts","text":"Since simple features object layout make_grid(), straightforward generate thematic gridmaps using geom_sf() alongside ggplot2’s standard geom layers grammar. map perimeter départements encoded proportional symbols geom_point(), positioned grid centroid cells département assigned.  quick explanation ggplot2 spec: Data: join gridded object (grid) layout solution, france_deps, simple features file containing real geographies départements. mutate(), calculate perimeters file drop geometry. Note also record size grid cell grid object – help placing labels, potentially symbols chart elements, map. Encoding: proportional symbols positioned centroids département grid cells (x, y), sized according perimeter. Marks: geom_point() proportional symbols geom_sf() grid outline outline real geography France. want collapse outline separately Corsica achieve use group_by() derived variable identifying départements Corsica (is_corse).","code":"# Find the cell size of grids -- for label positioning. cell_size <- st_bbox(grid |> slice(1)) cell_width <- cell_size$xmax - cell_size$xmin   cell_height <- cell_size$ymax - cell_size$ymin  # Plot as a proportional symbol map. grid |>   # Identify cells that form the layout.   inner_join(solution) |>    # Record and attach the perimeter of each département.   left_join(france_deps |>                mutate(perimeter=as.numeric(st_perimeter(geometry)/1000)) |>                st_drop_geometry() |>                select(name, perimeter), by=c(\"area_name\"=\"name\")) |>    ggplot() +   # Plot grey cell background.   geom_sf(fill=\"#d9d9d9\", colour=\"#ffffff\", linewidth=.5, alpha=.9) +   # Plot real geography of France as an outline.   geom_sf(data=france_deps |> mutate(is_corse=str_detect(name, \"Corse\")) |>             group_by(is_corse) |> summarise(),           fill=\"transparent\", colour=\"#525252\", linewidth=.3) +   # Plot proportional symbols.   geom_point(aes(x, y, size=perimeter), colour=\"#a50f15\", fill=\"#fcbba1\", pch=21, alpha=.9) +   # Plot text labels in bottom right of grid cells.   geom_text(aes(x=x+.48 *cell_width, y=y-.48*cell_height,                                             label=str_extract(area_name, \"^.{3}\")),             colour=\"#252525\", alpha=0.5, size=2, show.legend=FALSE,              hjust=\"right\", vjust=\"bottom\", face=\"Bold\") +   scale_size(guide=\"none\")"},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"gridmap-as-geographically-arranged-geoms-with-facet_grid","dir":"Articles","previous_headings":"","what":"Gridmap as geographically-arranged geoms with facet_grid()","title":"Using gridmap layouts","text":"example , render gridmaps way thematic map. gridded layout may resolve occlusion proportional symbols located real geographic position. However, showing complex multivariate structure, intended gridmap arrangements. course many interesting data represent French départements. graphics , show 1D distribution inverse distance neighbouring départements Paris Corse-du-Sud. terribly exciting statistic, fine illustrative article. Paris three départements close; Corse-du-Sud one immediate neighbour Corsica many mainland distance away.  can generate small multiple faceted plots , standard ggplot2 using faceting. Eyeballing full graphic, certain départements must reasonably close proximity one another (cells containing longer bars). Using facet_grid(), can effect spatial arrangement plots. confirms might expected: Paris distinctive, subdividing several départements close geographic space.  quick explanation ggplot2 spec: Data: staging dataset (plot_data) created. order bring col row indexes faceting grid, join france_ods gridmap solution dataset, ‘destination’ département, larger reference cells gridmap – bars representing inverse distances département, call ‘origins’. mutate, scale 1/distance 0 1, using minimum distance origin-destination département, recoded distances 0 départements origin-destination. grouping destinations, rank ‘origin’ départements proximity (rank). Encoding: Bars whose length (y=) varies according inverse distance categorical position (x=) according rank proximity ‘destination’ département. Marks: geom_col() bars, top 20 proximate ‘origin’ départements filtered; geom_text() drawing ‘destination’ département labels. Facets: facet_grid() slight hack row variable (-row) gridmappr’s origin [min-row, min-col] bottom-left cell grid whereas facet_grid() origin top-left.","code":"plot_data <- france_ods |>    left_join(solution, by=c(\"d_name\"=\"area_name\")) |>    rename(d_row=row, d_col=col) |> ungroup() |>    mutate(     dep_dist=if_else(o_name==d_name,10^8,dep_dist),     min_dist=min(dep_dist),     dep_dist=min_dist/(dep_dist),   ) |>    group_by(d_name) |>    arrange(desc(dep_dist)) |>   mutate(rank=row_number(), is_focus=o_name==d_name) |> ungroup()   plot_data |>    ggplot() +   # Draw background map tiles (equivalent to geom_sf()).   geom_tile(     data=grid %>% st_drop_geometry()  %>%        inner_join(france_grid) %>%        mutate(d_col=col, d_row=row),     aes(x = 10, y = .5),     width=20, height=1,     fill=\"#d9d9d9\", colour=\"#969696\", linewidth=.1, alpha=.9   ) +   # Draw column charts.   geom_col(     data = . %>% filter(rank<21),     aes(x=rank, y=dep_dist), width=1, fill=\"#cb181d\", alpha=.5) +   # Draw text labels for each département.   geom_text(data=. %>% filter(o_name==d_name), aes(x=20, y=.95,                                                    label=str_extract(d_name, \"^.{3}\")),             colour=\"#252525\", alpha=0.4, size=3.2, show.legend=FALSE,             hjust=\"right\", vjust=\"top\", fontface=\"bold\") +   facet_grid(-d_row~d_col)"},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"using-gridmap-allocations-with-ggplot2-extensions","dir":"Articles","previous_headings":"","what":"Using gridmap allocations with ggplot2 extensions","title":"Using gridmap layouts","text":"user-friendly way drawing gridmaps gridmappr-generated layouts, process incporporating gridmappr excellent tmap package. Although benefits designing gridmaps within standard declarative ggplot2, preferring slightly higher-level interface demonstrated , gridmappr generated layouts can also used geofacet. Since points_to_grid() returns grid allocations data structure required geofacet, reasonably straightforward. code , slightly reorganise variables gridmap solution file transpose row column -front, necessary facet_grid() example. allocation (grid_data) supplied facet_geo().  TODO: data cells display. ’ve investiagted likely causes, detective work needed fix .","code":"# Slight edits to solution dataset, as required by geofacet. grid_data <- solution |>    mutate(     # A code variable is required.     code=row_number(),     # Transpose row, due to inverse origin.     row=((max(row)+min(row))-row),     name=area_name     ) |>    select(row, col, code, name) |>    # Cast name as factor and set levels, so that exactly match with plot_data.   arrange(name) |> mutate(name=factor(name))      plot_data |>    select(o_name, d_name, dep_dist, rank, name=d_name) |>    filter(rank<21) |>    arrange(name) |>    # Cast name as factor and set levels, so that exactly match with grid_data.   mutate(name=factor(name, levels=grid_data$name)) |>    ggplot() +   # Draw column charts.   geom_col(aes(x=rank, y=dep_dist), width=1, fill=\"#cb181d\", alpha=.5) +   # Call facet function and supply 'name' and the 'grid_data'.    facet_geo(~name, grid=grid_data, labeller = as_labeller(function(x) str_extract(x, \"^.{3}\"))) +   theme(strip.text = element_text(face=\"bold\", size=10, colour=\"#636363\"))"},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"gridmap-as-geographically-arranged-geom_sfs-od-maps","dir":"Articles","previous_headings":"","what":"Gridmap as geographically arranged geom_sfs (OD Maps)","title":"Using gridmap layouts","text":"far generated gridmap graphics standard thematic maps using polygon object geom_sf(); geographically arranged plot objects (glyphmaps) facet_grid(). Combining approaches – placing standard thematic maps geographical arrangement (using facet_grid()) – allows creation OD Maps. map-within-map layout, can encode distances ‘destination’ départements using bars, cells ‘origin’ départements arranged geographically.  ggplot2 spec creating OD map: Take staged dataset join twice solution dataset geometry data, either real (france_deps) gridded (france_grid). first join, d_name. map figure D-OD map. larger (focus) grid cells correspond ‘destination’ départements; smaller cells ‘origin’ départements coloured according distances larger (focus) cells. second join , o_name, mirrors approach, except course shared column datasets joined. third join geometry data, using ‘origin’ o_name joining variable. Note join either france_grid, smaller maps gridded space, france_dep smaller maps real geography. Finally mutate() specially identify département focus (is_focus), ‘destinations’ case. Gridmap cells coloured according distances (fill=dist). Text labels destination (focus) département drawn top-right corner larger cells. Note coordinate space gridmap dataset x,y location département labels derived bounding box object (bbox_grid). 3. Marks: geom_sf() drawing small gridcell maps; geom_text() drawing labels; geom_tile() drawing background cells. 4. Scale: scale_fill_distiller() continuous colour scheme using ColorBrewer Reds palette. 5. Facets: facet_grid() effecting map-within-map layout.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/articles/use-gridmaps.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Using gridmap layouts","text":"Beecham, R. (2025) ‘Visualization Social Data Science’, CRC Press, ISBN: 9781032259710. Beecham, R. Slingsby, . (2019) ‘Characterising labour market self-containment London geographically arranged small multiples’, Environment Planning : Economy Space, 51(6), pp. 1217–1224. doi: 10.1177/0308518X19850580. Wood, J., Dykes, J. Slingsby, . (2010) ‘Visualisation Origins, Destinations Flows OD Maps’, Cartographic Journal, 47(2), pp. 117–129. doi: 10.1179/000870410x12658023467367.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Roger Beecham. Author, maintainer.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beecham R (2025). gridmappr: Gridmap Allocations Approximate Spatial Arrangements. R package version 0.1.1, https://github.com/rogerbeecham/gridmappr.","code":"@Manual{,   title = {gridmappr: Gridmap Allocations with Approximate Spatial Arrangements},   author = {Roger Beecham},   year = {2025},   note = {R package version 0.1.1},   url = {https://github.com/rogerbeecham/gridmappr}, }"},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"gridmappr-","dir":"","previous_headings":"","what":"Gridmap Allocations with Approximate Spatial Arrangements","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"gridmappr R package automates process generating small multiple gridmap layouts. Given set geographic point locations, creates grid stated row, column dimensions, places point grid cell distance points geographic space within grid space minimised. package R implementation Jo Wood’s Observable notebooks Linear Programming solvers application Gridmap Allocation problem.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"gridmap-allocation-using-compactness-with-points_to_grid","dir":"","previous_headings":"","what":"Gridmap allocation using compactness with points_to_grid()","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"Gridmaps, sometimes called tilemaps, maps spatial units allocated spatially-arranged grid cells regular size. Many gridmaps generated manually, widely used LondonSquared layout London boroughs example. automatic allocation spatial units grid cells, various constraints might considered, see Meulemans et al. 2017 formal discussion evaluation. gridmappr allocates geographic point locations grid cells total squared distances geographic grid locations minimised. point allocated one grid cell cell grid can contain one geographic point. grid must therefore contain least many cells geographic points. allocation optimised compactness parameter, scaled 0-1. value 0.5 attempts place point relative geographic position scaled within bounds grid; value 1 attempts place point close centre grid possible; compactness closer 0 allocates cells increasingly towards edge grid. main allocation function call points_to_grid(). return grid cell positions (row column identifiers) given set geographic locations. paramerised : pts tibble geographic points (x,y) allocated grid. n_row Maximum number rows grid. n_col Maximum number columns grid. compactness Optional parameter 0 1 0 allocates towards edges, 0.5 preserves scaled geographic location 1 allocates towards centre grid. Default 1 (compact cluster). spacers Optional list grid cell locations defining grid location fixed spacers allocated points. Coordinates (row, column) order origin (1,1) bottom-left. Default empty list.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"can install development version gridmappr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rogerbeecham/gridmappr\")"},{"path":[]},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"french-départements","dir":"","previous_headings":"Example allocations","what":"French Départements","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"generating gridmap layout France’s 96 départements, first try candidate grid configurations. Remembering grid must contain least many cells spatial units, grids 10x10, 12x12 14x14 trialed: n_row Set 10, 12, 14 n_col Set 10, 12, 14 compactness Set .6, attempting preserve geographic layout degree compactness around grid centre. Notice smaller grid dimensions, graphic space encoding data, expense spatial precision; larger grid dimensions, closer layout approximates real geography, expense graphical space.    exploration, 13x12 grid, seems provide reasonable balance graphic space geographic context (shape adjacency). However, layout implies Corsica contiguous mainland France. point, worth adding spacers – grid cells constrain distribution allowing points allocated . Spacers defined list (row, column) order origin (1,1) bottom-left. ensure Corsica separated mainland France, first three rows 11th column first two 10th column excluded.","code":"# Create df of point locations. pts <- france_deps |> st_drop_geometry() |>   select(area_name = name, x, y)  # Create gridmap layout. solution <- points_to_grid(pts, n_row=10, n_col=10, compactness = .6) # Create gridmap layout,. solution <- points_to_grid(pts, n_row=12, n_col=12, compactness = .6) # Create gridmap layout. solution <- points_to_grid(pts, n_row=14, n_col=14, compactness = .6) # Spacers to separate Corsica from mainland. spacers <- list(   c(1, 11), c(2, 11), c(3, 11), c(2,10), c(1,10) ) # Point centroids for real départements. pts <- france_deps |>   st_drop_geometry() |>   select(area_name = name, x = x, y = y)  solution <- points_to_grid(pts, 13, 12, .6, spacers)"},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"us-states","dir":"","previous_headings":"Example allocations","what":"US States","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"course well-known geographies manual control allocation desirable. gridmap US, example, separating Alaska, Hawaii Puerto Rico.  can addressed judiciously inserting spacers.","code":"# Grid dimensions. n_row <- 7 n_col <- 12 # Point centroids for US states. pts <- us_states |>   st_drop_geometry() |>   select(area_name = STUSPS, x, y) # Derive layout solution. solution <- points_to_grid(pts, n_row, n_col, .8) # Grid dimensions. n_row <- 7 n_col <- 12 # Spacers to separate non-contiguous states from mainland. spacers <- list(   c(4, 2), c(4, 3),   c(3, 5), c(3, 4), c(3, 3), c(3, 12), c(3, 11),   c(2, 4), c(2, 5), c(2, 6), c(2, 7), c(2, 8),   c(1, 6) ) # Point centroids for US states. pts <- us_states |>   st_drop_geometry() |>   select(area_name = STUSPS, x, y) # Derive layout solution. solution <- points_to_grid(pts, n_row, n_col, .9, spacers)"},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"leicestershire-wards","dir":"","previous_headings":"Example allocations","what":"Leicestershire Wards","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"Geographies ‘holes’ particular challenge grid layouts. example , compactness set zero, meaning allocations pushed edge grid, preserving internal space containing separate City Leicester.","code":"# Grid dimensions. n_row <- 14 n_col <- 14 # Point centroids for Leicestershire wards. pts <- leics_wards |>   st_drop_geometry() |>   select(area_name = ward_name, x = easting, y = northing) # Derive layout solution. solution <- points_to_grid(pts, n_row, n_col, 0)"},{"path":"https://www.roger-beecham.com/gridmappr/index.html","id":"example-uses","dir":"","previous_headings":"","what":"Example Uses","title":"Gridmap Allocations with Approximate Spatial Arrangements","text":"Beecham, R., Dykes, J., Hama, L. Lomax, N. (2021) ‘Use ‘Glyphmaps’ Analysing Scale Temporal Spread COVID-19 Reported Cases’, ISPRS International Journal Geo-Information, 10(4), pp. 213–. doi: 10.3390/ijgi10040213. Beecham, R. Slingsby, . (2019) ‘Characterising labour market self-containment London geographically arranged small multiples’, Environment Planning : Economy Space, 51(6), pp. 1217–1224. doi: 10.1177/0308518X19850580. Wood, J., Badawood, D., Dykes, J. Slingsby, . (2012) ‘BallotMaps: Detecting name bias alphabetically ordered ballot papers’, IEEE Transactions Visualization Computer Graphics, 17(12), pp. 2384–2391. doi: 10.1109/TVCG.2011.174.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/france_deps.html","id":null,"dir":"Reference","previous_headings":"","what":"French Departments outline collected from data.gouv.fr — france_deps","title":"French Departments outline collected from data.gouv.fr — france_deps","text":"Outline French departments collected data.gouv.fr, simplified sf geometry.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/france_deps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"French Departments outline collected from data.gouv.fr — france_deps","text":"","code":"france_deps"},{"path":"https://www.roger-beecham.com/gridmappr/reference/france_deps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"French Departments outline collected from data.gouv.fr — france_deps","text":"sf data.frame 96 observation 5 variables: name Name identifying department name_prefecture Name identifying préfecture department x Long department centroid y Lat department centroid geometry MULTIPOLYGON representing department outline","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/france_deps.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"French Departments outline collected from data.gouv.fr — france_deps","text":"https://www.data.gouv.fr/en/datasets/carte-des-departements-2-1/","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/grid_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"grid_locations — grid_locations","title":"grid_locations — grid_locations","text":"https://observablehq.com/@jwolondon/gridmap-allocation. Creates list grid locations stated size, spacer positions removed.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/grid_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grid_locations — grid_locations","text":"","code":"grid_locations(n_row, n_col, spacers = list())"},{"path":"https://www.roger-beecham.com/gridmappr/reference/grid_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grid_locations — grid_locations","text":"n_row maximum number rows defining grid. must least many grid cells points allocate. n_col maximum number columns defining grid. must least many grid cells points allocate. spacers Optional list grid cell locations defining grid location fixed spacers allocated points. Coordinates (row, column) order origin top-left. Default empty array.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/grid_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grid_locations — grid_locations","text":"tibble grid coordinates order original array input points.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/grid_locations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"grid_locations — grid_locations","text":"Roger Beecham","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/grid_locations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"grid_locations — grid_locations","text":"","code":"grid <- grid_locations(n_row = 8, n_col = 8, spacers = list()) grid #> # A tibble: 64 × 2 #>      row   col #>    <int> <int> #>  1     1     1 #>  2     1     2 #>  3     1     3 #>  4     1     4 #>  5     1     5 #>  6     1     6 #>  7     1     7 #>  8     1     8 #>  9     2     1 #> 10     2     2 #> # ℹ 54 more rows"},{"path":"https://www.roger-beecham.com/gridmappr/reference/leics_wards.html","id":null,"dir":"Reference","previous_headings":"","what":"Leicestershire Ward outline collected from OS OpenGeography — leics_wards","title":"Leicestershire Ward outline collected from OS OpenGeography — leics_wards","text":"Outline Leicestershire Wards collected OS OpenGeography, simplified sf geometry.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/leics_wards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leicestershire Ward outline collected from OS OpenGeography — leics_wards","text":"","code":"leics_wards"},{"path":"https://www.roger-beecham.com/gridmappr/reference/leics_wards.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Leicestershire Ward outline collected from OS OpenGeography — leics_wards","text":"sf data.frame 151 observation 5 variables: ward_code Code identifying ward ward_name Name identifying ward easting Easting ward centroid northing Northing ward centroid geometry MULTIPOLYGON representing ward outline","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/leics_wards.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Leicestershire Ward outline collected from OS OpenGeography — leics_wards","text":"https://geoportal.statistics.gov.uk/","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/london_boroughs.html","id":null,"dir":"Reference","previous_headings":"","what":"London borough outline collected from OS OpenGeography — london_boroughs","title":"London borough outline collected from OS OpenGeography — london_boroughs","text":"Outline London Boroughs collected OS OpenGeography, simplified sf geometry.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/london_boroughs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"London borough outline collected from OS OpenGeography — london_boroughs","text":"","code":"london_boroughs"},{"path":"https://www.roger-beecham.com/gridmappr/reference/london_boroughs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"London borough outline collected from OS OpenGeography — london_boroughs","text":"sf data.frame 33 observation 5 variables: area_code Code identifying local authority area_name Name identifying local authority easting Easting local authority centroid northing Northing local authority centroid geometry MULTIPOLYGON representing local authority outline","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/london_boroughs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"London borough outline collected from OS OpenGeography — london_boroughs","text":"https://geoportal.statistics.gov.uk/","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/make_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"make_grid — make_grid","title":"make_grid — make_grid","text":"Constructs 2D grid given number rows columns sf object.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/make_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make_grid — make_grid","text":"","code":"make_grid(sf_file, n_row, n_col)"},{"path":"https://www.roger-beecham.com/gridmappr/reference/make_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make_grid — make_grid","text":"sf_file sf object pass grid . n_row number rows grid. n_col number columns grid.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/make_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make_grid — make_grid","text":"sf object variables identifying col row IDs (bottom left origin), geographic centroid grid square.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/make_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"make_grid — make_grid","text":"Roger Beecham","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/make_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make_grid — make_grid","text":"","code":"library(ggplot2) grid <- make_grid(london_boroughs, 8, 8) grid |> ggplot() + geom_sf()"},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_normalised.html","id":null,"dir":"Reference","previous_headings":"","what":"points_normalised — points_normalised","title":"points_normalised — points_normalised","text":"https://observablehq.com/@jwolondon/gridmap-allocation. Returns LP solution allocating 2D points grid.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_normalised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"points_normalised — points_normalised","text":"","code":"points_normalised(pts, grd, compactness)"},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_normalised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"points_normalised — points_normalised","text":"pts tibble geographic points (x,y) transformed allocation grid. grd tibble defining grid positions. compactness Optional parameter 0 1 0 allocates towards edges, 0.5 preserves scaled geographic location 1 allocates towards centre grid. Default 1 (compact cluster).","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_normalised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"points_normalised — points_normalised","text":"tibble transformed grid coordinates","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_normalised.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"points_normalised — points_normalised","text":"Roger Beecham","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_normalised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"points_normalised — points_normalised","text":"","code":"library(tibble) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union pts <- london_boroughs |> st_drop_geometry() |> select(area_name, x = easting, y = northing) grd <- grid_locations(n_row = 8, n_col = 8, spacers = list()) points_normalised(pts, grd, .6) #>                 area_name        x        y #> 1          City of London 4.605442 4.779046 #> 2    Barking and Dagenham 6.676165 5.505787 #> 3                  Barnet 3.405588 6.794108 #> 4                  Bexley 6.870485 3.630489 #> 5                   Brent 2.886190 5.769615 #> 6                 Bromley 5.905485 1.745306 #> 7                  Camden 3.946936 5.346249 #> 8                 Croydon 4.812824 1.558629 #> 9                  Ealing 2.541721 4.895743 #> 10                Enfield 4.665636 7.655574 #> 11              Greenwich 5.969046 3.717334 #> 12                Hackney 4.898739 5.637604 #> 13 Hammersmith and Fulham 3.458646 4.127713 #> 14               Haringey 4.454618 6.328095 #> 15                 Harrow 2.312658 6.403114 #> 16               Havering 7.655574 5.972382 #> 17             Hillingdon 1.344426 5.120608 #> 18               Hounslow 1.960916 3.539768 #> 19              Islington 4.440613 5.416616 #> 20 Kensington and Chelsea 3.713295 4.332224 #> 21   Kingston upon Thames 2.871781 2.071167 #> 22                Lambeth 4.435227 3.667902 #> 23               Lewisham 5.347035 3.225538 #> 24                 Merton 3.755310 2.481739 #> 25                 Newham 5.728402 5.160735 #> 26              Redbridge 6.104248 6.353101 #> 27   Richmond upon Thames 2.804046 3.090619 #> 28              Southwark 4.815921 3.713651 #> 29                 Sutton 3.928622 1.344426 #> 30          Tower Hamlets 5.139114 4.797074 #> 31         Waltham Forest 5.271354 6.507987 #> 32             Wandsworth 3.631823 3.379261 #> 33            Westminster 4.051435 4.684641"},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_to_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"points_to_grid — points_to_grid","title":"points_to_grid — points_to_grid","text":"https://observablehq.com/@jwolondon/gridmap-allocation. Returns LP solution allocating 2D points grid.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_to_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"points_to_grid — points_to_grid","text":"","code":"points_to_grid(pts, n_row, n_col, compactness = 1, spacers = list())"},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_to_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"points_to_grid — points_to_grid","text":"pts tibble geographic points (x,y) allocated grid. n_row maximum number rows grid. n_col maximum number columns grid. compactness Optional parameter 0 1 0 allocates towards edges, 0.5 preserves scaled geographic location 1 allocates towards centre grid. Default 1 (compact cluster). spacers Optional list grid cell locations defining grid location fixed spacers allocated points. Coordinates (row, column) order origin bottom-left. Default empty list.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_to_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"points_to_grid — points_to_grid","text":"tibble matched point grid locations.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_to_grid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"points_to_grid — points_to_grid","text":"Roger Beecham","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/points_to_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"points_to_grid — points_to_grid","text":"","code":"library(dplyr) library(sf)  pts <- london_boroughs |> st_drop_geometry() |> select(area_name, x = easting, y = northing)  solution <- points_to_grid(pts, n_row = 8, n_col = 8, spacers = list(), compactness = .6)  solution #>    row col              area_name #> 1    5   5         City of London #> 2    6   7   Barking and Dagenham #> 3    7   3                 Barnet #> 4    4   7                 Bexley #> 5    6   3                  Brent #> 6    2   6                Bromley #> 7    5   3                 Camden #> 8    2   5                Croydon #> 9    5   2                 Ealing #> 10   8   5                Enfield #> 11   4   6              Greenwich #> 12   6   5                Hackney #> 13   4   3 Hammersmith and Fulham #> 14   7   4               Haringey #> 15   6   2                 Harrow #> 16   6   8               Havering #> 17   5   1             Hillingdon #> 18   4   2               Hounslow #> 19   6   4              Islington #> 20   4   4 Kensington and Chelsea #> 21   2   3   Kingston upon Thames #> 22   3   5                Lambeth #> 23   3   6               Lewisham #> 24   2   4                 Merton #> 25   6   6                 Newham #> 26   7   6              Redbridge #> 27   3   3   Richmond upon Thames #> 28   4   5              Southwark #> 29   1   4                 Sutton #> 30   5   6          Tower Hamlets #> 31   7   5         Waltham Forest #> 32   3   4             Wandsworth #> 33   5   4            Westminster"},{"path":"https://www.roger-beecham.com/gridmappr/reference/solve_lp.html","id":null,"dir":"Reference","previous_headings":"","what":"solve_lp — solve_lp","title":"solve_lp — solve_lp","text":"https://observablehq.com/@jwolondon/gridmap-allocation. Returns LP solution allocating 2D points grid.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/solve_lp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"solve_lp — solve_lp","text":"","code":"solve_lp(pts, grd, compactness)"},{"path":"https://www.roger-beecham.com/gridmappr/reference/solve_lp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"solve_lp — solve_lp","text":"pts tibble geographic points (x,y) transformed allocation grid. grd tibble defining grid positions. compactness Optional parameter 0 1 0 allocates towards edges, 0.5 preserves scaled geographic location 1 allocates towards centre grid. Default 1 (compact cluster).","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/solve_lp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"solve_lp — solve_lp","text":"tibble containing solution row-ids pts grd tibbles model constructed.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/solve_lp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"solve_lp — solve_lp","text":"Roger Beecham","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/solve_lp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"solve_lp — solve_lp","text":"","code":"library(sf) library(dplyr) pts <- london_boroughs |> st_drop_geometry() |> select(area_name, x = easting, y = northing) grd <- grid_locations(n_row = 8, n_col = 8, spacers = list()) grd_pos <- solve_lp(points_normalised(pts, grd, 0.6), grd, 0.6) grd_pos #>    grd pt #> 1   37  1 #> 2   47  2 #> 3   51  3 #> 4   31  4 #> 5   43  5 #> 6   14  6 #> 7   35  7 #> 8   13  8 #> 9   34  9 #> 10  61 10 #> 11  30 11 #> 12  45 12 #> 13  27 13 #> 14  52 14 #> 15  42 15 #> 16  48 16 #> 17  33 17 #> 18  26 18 #> 19  44 19 #> 20  28 20 #> 21  11 21 #> 22  21 22 #> 23  22 23 #> 24  12 24 #> 25  46 25 #> 26  54 26 #> 27  19 27 #> 28  29 28 #> 29   4 29 #> 30  38 30 #> 31  53 31 #> 32  20 32 #> 33  36 33"},{"path":"https://www.roger-beecham.com/gridmappr/reference/us_states.html","id":null,"dir":"Reference","previous_headings":"","what":"US State outline — us_states","title":"US State outline — us_states","text":"Outline US States collected US Census Bureau, simplified sf geometry.","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/us_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US State outline — us_states","text":"","code":"us_states"},{"path":"https://www.roger-beecham.com/gridmappr/reference/us_states.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"US State outline — us_states","text":"sf data.frame 32 observation 12 variables: STATEFP State FIPS code STATENS State national standard code AFFGEOID American FactFinder code GEOID State identifier FIPS STUSPS United States Postal Service state abbreviation NAME State name LSAD Legal/statistical area description code American Indian/Alaska Native/Native Hawaiian area ALAND Land area AWATER Water area x X coordinate state centroid y Y coordinate state centroid geometry MULTIPOLYGON representing state outline","code":""},{"path":"https://www.roger-beecham.com/gridmappr/reference/us_states.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"US State outline — us_states","text":"https://www.census.gov/data.html","code":""}]
